name: 'Terraform Apply and Summary'
description: 'Applies Terraform plan and writes a grouped resource summary with IDs and timestamp to GitHub Step Summary.'

inputs:

  release-tag:
    description: 'Optional release tag to checkout'
    required: false
    type: string
    default: ''

  terraform-dir:
    description: "Path to the Terraform configuration"
    required: false
    default: "tf"

  s3-bucket:
    description: "S3 bucket for Terraform backend"
    required: true

  s3-region:
    description: "AWS region where the S3 bucket is located"
    required: true

  tf-plan-file:
    description: "File to save the Terraform plan output"
    required: false
    default: "tfplan"  

  tf-vars-file:
    description: "Optional Terraform variable file"
    required: false
    default: "terraform.tfvars"

  tf-plan-name:
    description: "Name of the Terraform plan file"
    required: false
    default: "terraform-plan"

  ci-pipeline:
    description: "Set to true to use commit SHA in backend key"
    required: false
    default: "false"

runs:
  using: 'composite'
  steps:

    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.release-tag || github.ref_name }}       

    - name: Download Terraform plan artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.terraform-plan-file }}
        path: ${{ inputs.tf-plan-name}}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Compute Backend Key from Repository Name
      id: key
      shell: bash
      run: |
        if [[ "${{ inputs.ci-pipeline }}" == "true" ]]; then
          state_key="${{ github.repository }}/${{ github.sha }}/terraform.tfstate"
        else
          state_key="${{ github.repository }}/terraform.tfstate"
        fi
        echo "s3_key=$state_key" >> $GITHUB_OUTPUT

    - name: Terraform Init with S3 Backend
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        terraform init -input=false \
          -backend-config="bucket=${{ inputs.s3-bucket }}" \
          -backend-config="key=${{ steps.key.outputs.s3_key }}" \
          -backend-config="region=${{ inputs.s3-region }}" \
          -backend-config="encrypt=true" \
          -backend-config="use_lockfile=true"

    - name: Terraform Apply with Summary
      id: apply
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        pwd
        echo "=========================="
        ls -alrt
        echo "=========================="
        cat ${{ inputs.tf-plan-file }}.out
        
        # Check if the plan file exists
        if [ ! -f tfplan.out ]; then
          echo "❌ Plan file not found. Exiting."
          exit 1
        fi

        START_TIME=$(date -u "+%Y-%m-%d %H:%M:%S UTC")
        echo "## 🚀 Terraform Apply Output" >> "$GITHUB_STEP_SUMMARY"
        echo "_**Started at: ${START_TIME}**_" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        # Apply the saved plan
        terraform apply -input=false -auto-approve tfplan.out

        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "### 📌 Affected Resources" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "| Resource Address | Action | Resource Type | Resource Name |" >> "$GITHUB_STEP_SUMMARY"
        echo "|------------------|--------|---------------|----------------|" >> "$GITHUB_STEP_SUMMARY"

        # Parse affected resources from the plan
        terraform show -json tfplan.out | jq -r '
          .resource_changes[] | 
          select(.change.actions != ["no-op"]) |
          "| \(.address) | \(.change.actions[0]) | \(.type) | \(.name) |"
        ' >> "$GITHUB_STEP_SUMMARY"

        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "### 📤 Terraform Outputs" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        terraform output -json > tf_output.json

        echo "| Name | Value |" >> "$GITHUB_STEP_SUMMARY"
        echo "|------|-------|" >> "$GITHUB_STEP_SUMMARY"

        jq -r 'to_entries[] | 
          "| \(.key) | \(.value.value)"' tf_output.json >> "$GITHUB_STEP_SUMMARY"

        echo "" >> "$GITHUB_STEP_SUMMARY"
        END_TIME=$(date -u "+%Y-%m-%d %H:%M:%S UTC")
        echo "_**Completed at: ${END_TIME}**_" >> "$GITHUB_STEP_SUMMARY"
      shell: bash
