name: 'Terraform Apply and Summary'
description: 'Applies Terraform plan and writes a grouped resource summary with IDs and timestamp to GitHub Step Summary.'

inputs:
  artifact-name:
    description: 'Name of the uploaded Terraform plan artifact'
    required: true
    default: 'terraform-plan'

  s3-bucket:
    description: "S3 bucket for Terraform backend"
    required: true

  s3-region:
    description: "AWS region where the S3 bucket is located"
    required: true

  dynamodb-table:
    description: "DynamoDB table name for state locking"
    required: true

  terraform-plan-file:
    description: 'Path to the Terraform binary plan file inside the artifact'
    required: true
    default: 'tfplan.out'

  terraform-dir:
    description: 'Directory where Terraform code is located'
    required: false
    default: 'tf'

  ci-pipeline:
    description: "Whether this is a CI pipeline"
    required: false
    default: "true"

runs:
  using: 'composite'
  steps:

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Download Terraform plan artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: plan-artifact

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Compute Backend Key from Repository Name
      id: key
      shell: bash
      run: |
        if [[ "${{ inputs.ci-pipeline }}" == "true" ]]; then
          state_key="${{ github.repository }}/${{ github.sha }}/terraform.tfstate"
        else
          state_key="${{ github.repository }}/terraform.tfstate"
        fi
        echo "s3_key=$state_key" >> $GITHUB_OUTPUT

    - name: Terraform Init with S3 Backend
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        terraform init -input=false \
          -backend-config="bucket=${{ inputs.s3-bucket }}" \
          -backend-config="key=${{ steps.key.outputs.s3_key }}" \
          -backend-config="region=${{ inputs.s3-region }}" \
          -backend-config="encrypt=true" \
          -backend-config="dynamodb_table=${{ inputs.dynamodb-table }}"

    - name: Terraform Apply
      id: apply
      run: |
        cd "${{ github.workspace }}/${{ inputs.terraform-dir }}"

        TIMESTAMP=$(date -u "+%Y-%m-%d %H:%M:%S UTC")

        echo "## ðŸš€ Terraform Apply Output" >> "$GITHUB_STEP_SUMMARY"
        echo "_**Started at: ${TIMESTAMP}**_" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        terraform apply -input=false -auto-approve "${{ inputs.terraform-plan-file }}"

        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "### Affected Resources from Plan JSON" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "| Resource Address        | Action     | Resource Type     | Resource Name     | Timestamp               |" >> "$GITHUB_STEP_SUMMARY"
        echo "|--------------------------|------------|--------------------|--------------------|--------------------------|" >> "$GITHUB_STEP_SUMMARY"

        terraform show -json "${{ inputs.terraform-plan-file }}" > plan.json

        jq -r --arg timestamp "$TIMESTAMP" '
          .resource_changes[] |
          select(.change.actions != ["no-op"]) |
          [
            .address,
            (if .change.actions | index("create") then "create"
            elif .change.actions | index("update") then "update"
            elif .change.actions | index("delete") then "delete"
            else (.change.actions | join(","))
            end),
            .type,
            .name,
            $timestamp
          ] |
          @tsv
        ' plan.json | while IFS=$'\t' read -r address action type name timestamp; do
          echo "| $address | $action | $type | $name | $timestamp |" >> "$GITHUB_STEP_SUMMARY"
        done

        echo "" >> "$GITHUB_STEP_SUMMARY"
        TIMESTAMP=$(date -u "+%Y-%m-%d %H:%M:%S UTC")
        echo "_**Completed at: ${TIMESTAMP}**_" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
      shell: bash
