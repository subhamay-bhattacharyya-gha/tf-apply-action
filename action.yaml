name: 'Terraform Apply and Summary'
description: 'Applies Terraform plan and writes a grouped resource summary with IDs and timestamp to GitHub Step Summary.'

inputs:
  artifact-name:
    description: 'Name of the uploaded Terraform plan artifact'
    required: true
    default: 'terraform-plan'

  s3-bucket:
    description: "S3 bucket for Terraform backend"
    required: true

  s3-region:
    description: "AWS region where the S3 bucket is located"
    required: true

  dynamodb-table:
    description: "DynamoDB table name for state locking"
    required: true

  terraform-plan-file:
    description: 'Path to the Terraform binary plan file inside the artifact'
    required: true
    default: 'tfplan.out'

  terraform-dir:
    description: 'Directory where Terraform code is located'
    required: false
    default: 'tf'

  ci-pipeline:
    description: "Whether this is a CI pipeline"
    required: false
    default: "true"

runs:
  using: 'composite'
  steps:

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Download Terraform plan artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: plan-artifact

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Compute Backend Key from Repository Name
      id: key
      shell: bash
      run: |
        if [[ "${{ inputs.ci-pipeline }}" == "true" ]]; then
          state_key="${{ github.repository }}/${{ github.sha }}/terraform.tfstate"
        else
          state_key="${{ github.repository }}/terraform.tfstate"
        fi
        echo "s3_key=$state_key" >> $GITHUB_OUTPUT

    - name: Terraform Init with S3 Backend
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        terraform init -input=false \
          -backend-config="bucket=${{ inputs.s3-bucket }}" \
          -backend-config="key=${{ steps.key.outputs.s3_key }}" \
          -backend-config="region=${{ inputs.s3-region }}" \
          -backend-config="encrypt=true" \
          -backend-config="dynamodb_table=${{ inputs.dynamodb-table }}"

    - name: Convert Terraform plan to JSON
      shell: bash
      working-directory: ${{ github.workspace }}/${{ inputs.terraform-dir }}
      run: |
        cp ../plan-artifact/${{ inputs.terraform-plan-file }} tfplan.out
        terraform show -json tfplan.out > plan.json
        echo "----------- Present Directory --------------------------"
        pwd
        echo "--------------------------------------------------------"
        echo "----------- Terraform plan converted to JSON -----------"
        cat plan.json | jq
        echo "--------------------------------------------------------"

    - name: Terraform Apply
      id: apply
      run: |
        cd "${{ github.workspace }}/${{ inputs.terraform-dir }}"

        TIMESTAMP=$(date -u "+%Y-%m-%d %H:%M:%S UTC")

        echo "## ðŸš€ Terraform Apply Output" >> "$GITHUB_STEP_SUMMARY"
        echo "_**Started at: ${TIMESTAMP}**_" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        terraform apply -input=false -auto-approve "${{ inputs.terraform-plan-file }}" | tee apply_output.txt

        SUMMARY_LINE=$(grep -E "Apply complete! Resources: .* added, .* changed, .* destroyed." apply_output.txt || true)
        ADDED=$(echo "$SUMMARY_LINE" | grep -Eo "[0-9]+ added" | cut -d' ' -f1)
        CHANGED=$(echo "$SUMMARY_LINE" | grep -Eo "[0-9]+ changed" | cut -d' ' -f1)
        DESTROYED=$(echo "$SUMMARY_LINE" | grep -Eo "[0-9]+ destroyed" | cut -d' ' -f1)

        ADDED=${ADDED:-0}
        CHANGED=${CHANGED:-0}
        DESTROYED=${DESTROYED:-0}

        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "| Action   | Count |" >> "$GITHUB_STEP_SUMMARY"
        echo "|----------|-------|" >> "$GITHUB_STEP_SUMMARY"
        echo "| Added    | $ADDED |" >> "$GITHUB_STEP_SUMMARY"
        echo "| Changed  | $CHANGED |" >> "$GITHUB_STEP_SUMMARY"
        echo "| Destroyed| $DESTROYED |" >> "$GITHUB_STEP_SUMMARY"

        echo "" >> "$GITHUB_STEP_SUMMARY"
        echo "### Affected Resources with IDs and Timestamp" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"

        awk -v timestamp="$TIMESTAMP" '
          BEGIN {
            print "| Resource Type | Resource Name     | Action     | Resource ID                        | Timestamp               |"
            print "|---------------|--------------------|------------|-------------------------------------|--------------------------|"
          }
          /^[a-zA-Z0-9_]+\.[a-zA-Z0-9_\.]+: (Creating|Modifying|Destroying)/ {
            match($0, /^([a-zA-Z0-9_]+)\.([a-zA-Z0-9_\.]+): (Creating|Modifying|Destroying)/, res)
            key = res[1] "." res[2]
            ids[key] = res[3]
          }
          /^[a-zA-Z0-9_]+\.[a-zA-Z0-9_\.]+: (Creation|Destruction|Modification) complete/ {
            match($0, /\[id=([^\]]+)\]/, idmatch)
            match($0, /^([a-zA-Z0-9_]+)\.([a-zA-Z0-9_\.]+):/, res)
            key = res[1] "." res[2]
            type = res[1]
            name = res[2]
            id = (idmatch[1] != "") ? idmatch[1] : "n/a"
            action = (ids[key] != "") ? ids[key] : "Unknown"
            printf("| %-13s | %-18s | %-10s | %-35s | %-24s |\n", type, name, action, id, timestamp)
          }
        ' apply_output.txt >> "$GITHUB_STEP_SUMMARY"
      shell: bash
